name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npm run type-check

      - name: ESLint code quality check
        run: npm run lint

      - name: Prettier format check
        run: npm run format:check

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          CI: true

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Security audit
        run: npm run audit:security

      - name: Bundle analysis
        run: npm run analyze
        env:
          ANALYZE: true

  lighthouse-ci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start server
        run: npm start &
        env:
          NODE_ENV: production

      - name: Wait for server
        run: npx wait-on http://localhost:3000

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Vercel Configurations (Preview)
        run: |
          echo "üîç Debugging Vercel configuration for preview..."
          echo "VERCEL_ORG_ID length: ${#VERCEL_ORG_ID}"
          echo "VERCEL_PROJECT_ID length: ${#VERCEL_PROJECT_ID}"
          echo "VERCEL_TOKEN length: ${#VERCEL_TOKEN}"
          echo "ORG_ID starts with: ${VERCEL_ORG_ID:0:5}..."
          echo "PROJECT_ID starts with: ${VERCEL_PROJECT_ID:0:8}..."
          echo "TOKEN starts with: ${VERCEL_TOKEN:0:8}..."
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Vercel Configuration (Production)
        run: |
          echo "üîç Debugging Vercel configuration for production..."
          echo "VERCEL_ORG_ID length: ${#VERCEL_ORG_ID}"
          echo "VERCEL_PROJECT_ID length: ${#VERCEL_PROJECT_ID}"
          echo "VERCEL_TOKEN length: ${#VERCEL_TOKEN}"
          echo "ORG_ID starts with: ${VERCEL_ORG_ID:0:5}..."
          echo "PROJECT_ID starts with: ${VERCEL_PROJECT_ID:0:8}..."
          echo "TOKEN starts with: ${VERCEL_TOKEN:0:8}..."
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: Post-deployment health check
        run: |
          curl -f https://geelongmovement.com/api/health || exit 1
        continue-on-error: false
